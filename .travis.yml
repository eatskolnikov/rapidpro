# use container-based Ubuntu Trusty
dist: trusty
sudo: true

language: python
python:
  - "3.6.6"

services:
  - redis-server

env:
  - PGDB=10
  - PGDB=9.6

cache:
  directories:
    - "$HOME/.cache/pip"

before_install:
  - sudo -E service postgresql stop 9.2
  - sudo -E service postgresql stop 9.3
  - sudo -E service postgresql stop 9.4
  - sudo -E service postgresql stop 9.5
  - sudo -E service postgresql stop 9.6
  - sudo -E apt-get -yq --no-install-suggests --no-install-recommends $(travis_apt_get_options) install postgresql-$PGDB postgresql-client-$PGDB postgresql-$PGDB-postgis-2.4 postgresql-$PGDB-postgis-2.4-scripts
  - sudo -E sed -i -e '/local.*peer/s/postgres/all/' -e 's/peer\|md5/trust/g' /etc/postgresql/*/main/pg_hba.conf
  - sudo -E sed -i 's/port = 5433/port = 5432/' /etc/postgresql/*/main/postgresql.conf
  - sudo -E service postgresql restart $PGDB

install:
  # install all Python dependencies
  - pip install --upgrade pip
  - pip --version
  - pip install -r pip-freeze.txt --upgrade
  - pip install coveralls
  - pip install flake8

  # switch to Node 6 and install our node dependencies
  - nvm install 6
  - nvm use 6
  - npm install
  - npm run build

before_script:
  # setup test database
  - psql -U postgres -c "CREATE USER temba WITH PASSWORD 'temba';"
  - psql -U postgres -c "ALTER ROLE temba WITH SUPERUSER;"
  - psql -d 'template1' -U postgres -c "CREATE EXTENSION postgis;"
  - psql -d 'template1' -U postgres -c "CREATE EXTENSION postgis_topology;"
  - psql -d 'template1' -U postgres -c "CREATE EXTENSION hstore;"
  - psql -U temba postgres -c "CREATE DATABASE temba;"

  # use dev settings file
  - ln -s $TRAVIS_BUILD_DIR/temba/settings.py.dev $TRAVIS_BUILD_DIR/temba/settings.py

script:
  # any non-zero error code should be treated as an immediate failure
  - set -e

  # test PEP8 compliance on both Python 2 and 3
  - flake8
  
  # check for model changes not reflected in a migration
  - python manage.py makemigrations --dry-run | grep 'No changes detected' || (echo 'There are changes which require migrations.' && exit 1)

  # run our Javascript tests
  - node_modules/karma/bin/karma start karma.conf.coffee --single-run --browsers PhantomJS

  # check we can collect and compress all static files
  - python manage.py collectstatic --noinput --verbosity=0
  - (! python manage.py compress --extension=".haml" --settings=temba.settings_travis | grep 'Error') || exit 1
    
  # run our Python tests
  - coverage run manage.py test --noinput --verbosity=2

  - set +e

after_success:
  - pip install pyopenssl==17.4.0
  - coveralls --rcfile .coveragerc_failcheck
  - coverage report -i --rcfile .coveragerc
  - coverage report -i --rcfile .coveragerc_failcheck --fail-under=100
