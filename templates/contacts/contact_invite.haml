-extends "smartmin/list.html"
-load smartmin sms contacts
-load i18n humanize

-block page-top
  {% render as page_top %}
    {{block.super}}
  {% endrender %}
  -if has_contacts
    {{page_top}}

-block title-icon
  %span.title-icon
    .glyph.icon-users

-block content
  #pjax
    -block pjax
      .row-fluid
        .span3.sidebox
          %div.contacts{style:"margin-bottom: 10px"}

            - if org_perms.contacts.contact_list
              %a#id_import_contacts.btn.btn-default.btn-block{href:"{% url 'contacts.contact_list' %}"}
                -trans "Manage Contacts"

          #sidebar-nav
            %ul.nav.nav-list
              %li.nav-header
                -trans "Contacts"
              - for folder in folders
                %li{'class':'{% if request.path == folder.url %}active{% endif %}'}
                  %a{'href':'{{folder.url}}'}
                    {{folder.label}} ({{ folder.count | intcomma }})

              %li.nav-header
                -trans "Groups"
              - for group in groups
                %li{'class':'{% if current_group.id == group.pk %}active{% endif %}'}
                  %a{'href':'{% url "contacts.contact_invite_filter" group.uuid %}'}
                    {{group.label}} ({{ group.count | intcomma }})

        - if has_contacts
          - block contacts-list
            .span9

              - block buttons

                .pull-right
                  -block buttons-right
                    -block gear-menu
                      -include "gear_links_include.haml"

              %form{id: 'opt-in', class: 'span12', action: '', method: 'POST'}
                %label{for:'optin-flow'}
                  -trans "Opt-in Flow"
                %select{name:'id_optin_flow', style:"height:34px", id:"optin-flow", class:"select2", select2:""}
                  -for flow in org_flows
                    <option value="{{ flow.uuid }}"{% if flow.uuid == optin_flow %} selected{% endif %}>{{ flow.name }}</option>
                %input{type: 'submit', class: 'btn btn-primary', value: 'Save'}
                %a{href: '{% url "flows.flow_editor" optin_flow %}', style: 'display: table', target: '_blank'}
                  -trans "Open in the flow editor"

              .list-container
                %table.list-table.contact_list.table.object-list.table.table-condensed{style: '{% if not org_perms.contacts.contact_update %}margin-top:10px{% endif %}'}
                  %tr.contacts
                    %th
                    %th
                    -for field in contact_fields
                      -if field.show_in_table
                        %th
                          {{ field.label }}
                    %th
                      - if object_list
                        -trans "Created On"

                    %th
                      - if object_list
                        -trans ""

                  %tbody
                    - for object in contacts
                      %tr.contact.select-row.object-row{'class':'{% cycle row1 row2 %}', 'data-uuid': '{{object.uuid}}', 'data-object-id':'{{object.id}}'}

                        %td.value-text.field_name
                          {{ object|name:user_org }}

                        %td.value-phone.field_phone
                          %nobr
                            {{ object|urn:user_org }}

                        -for field in contact_fields
                          -if field.show_in_table
                            %td.field
                              {{ object|contact_field:field.key }}

                        %td.value-received.field_received.value-date
                          %nobr
                            {{ object.created_on|gmail_time }}

                        %td.value-received.field_received.button-invitation
                          %nobr
                            -if object.get_urns
                              %a.btn.btn-primary{href: 'javascript:;', onclick: 'inviteContact($(this));return false;', data-id: '{{ object.id }}'}
                                -trans "Invite"
                            -else
                              -trans "--"

                        // This is needed for action buttons
                        %td.hide
                          .value-labels
                            %nobr
                              - for group in object.all_groups.all
                                - if group.group_type == 'U'
                                  %span.label.label-info.lbl{ data-id: '{{group.id}}'}
                                    %a{'href':'{% url "contacts.contact_invite_filter" group.uuid %}'}
                                      {{group.name}}

                    -empty
                      %tr
                        %td{colspan:3}
                          -trans "No matching contacts."
                        -for field in contact_fields
                          -if field.show_in_table
                            %td.field
                        %td


              - block paginator
                - if object_list.count
                  .paginator
                    - include "smartmin/sidebar_pagination.haml"

        - else
          - include "contacts/empty_include.haml"

-block post-content
  - if org_perms.msgs.broadcast_send and not reply_disabled
    - include "msgs/msg_send_modal.haml"

  -if org_perms.contacts.contact_delete
    .contact-deletion.hide
      .title
        -trans "Delete Contacts"

      .body
        %p
          -trans "Are you sure you want to delete these contacts?"
        %p
          -trans "Once they are deleted, they will be gone forever. There is no way to undo this operation."

-block extra-style
  :css

    tr.contacts th {
      font-size:11px;
      height:10px;
      padding:0;
      padding-top:10px;
      font-weight:200;
      color: #aaa;
      border:0px solid;
      text-align:center;
    }

    td.field {
      text-align:center;
      min-width:125px;
    }

    .span9 .object-list tbody td {
      padding: 7px 6px;
      vertical-align: middle;
    }

    .span9 .contact_list tr.contacts {
      border-top: none;
    }

    .span9 .object-list tbody td.value-text {
      min-width: 30px;
      width: 55%;
    }

    .span9 .object-list tbody td.value-date, .span9 .object-list tbody td.button-invitation {
      text-align: center;
    }

    .modal .modal-body .control-group .control-label {
      display:none;
    }

    .search-error {
      color: #da4f49;
    }

    form#opt-in {
      margin: 0;
      position: relative;
    }

    form#opt-in label {
      color: #666;
      font-weight: bold;
    }

    a.not-link {
      cursor: text;
    }

    a.not-link:hover {
      text-decoration: none;
    }


-block extra-script
  {{ block.super }}

  :javascript

    $(document).on('click', '.search-query', function() {
      $(this).animate({ width: '600px'}, 200);
    });

    $(document).ready(function() {
      $('#optin-flow').select2({ minimumResultsForSearch: 10, width: '370px' });
    });

    function inviteContact(element) {
      var contactId = element.data('id');

      element.removeClass('btn');
      element.removeClass('btn-primary');
      element.html('Invite Sent');
      setTimeout(function(){
        element.html('Invite');
        element.addClass('btn');
        element.addClass('btn-primary');
      }, 5000)

      var headers = { 'X-PJAX': true };
      var type = 'GET';
      var url = '/contact/invite_send/' + contactId;
      var data = undefined;

      $.ajax({
          headers: headers,
          type: type,
          url: url,
          data: data,
          success: function(data, status, jqXHR) {},
          error: function(err) {
            console.log(err);
          }
      });

    }

    {% if org_perms.contacts.contact_create %}
    if($(location).attr('hash') == '#contact') {
      showCreateContactModal();
    }
    {% endif %}

    {% if org_perms.contacts.contactgroup_create %}
    if($(location).attr('hash') == '#group') {
      showCreateGroupModal();
    }
    {% endif %}


    // keeps track if we are on a link or not
    var onLink = false;

    {% if org_perms.contacts.contact_update %}

    function addContactToGroup(groupId){
      var contactIds = getCheckedIds();
      var groupedIds = getLabeledIds(groupId);

      var addGroup = true;

      // find the intersection of contactIds and groupedIds
      var contactIdsWithGroup = intersect(contactIds, groupedIds);

      // they all belong to the group, so we are actually removing these contacts from the group
      if (contactIdsWithGroup.length == contactIds.length){
        addGroup = false;
      }
      jQuery.ajaxSettings.traditional = true;
      fetchPJAXContent("", "#pjax", { postData: {objects: contactIds, label: groupId, add: addGroup, action: 'label', pjax: 'true'}, forceReload: true });
    }

    {% endif %}

    {% if org_perms.contacts.contact_create %}
    function showCreateContactModal() {
      var modal = new Modax('{% trans "Create Contact" %}', '{% url "contacts.contact_create" %}')
      modal.setIcon('icon-user')
      modal.setListeners({
        onSuccess: function() {
          location.reload();
        }
      })
      modal.show()
    }
    {% endif %}

    {% if org_perms.contacts.contactgroup_create %}
    function showCreateGroupModal() {
      var modal = new Modax('{% trans "Create Contact Group" %}','{% url "contacts.contactgroup_create" %}')
      modal.setIcon('icon-users')
      modal.setListeners({
        onSuccess: function() {
          location.reload();
        }
      })
      modal.show()
    }
    {% endif %}


    {% if org_perms.msgs.broadcast_send %}
    $(".send-button").click(function(){
      var contactsUuids = getCheckedUuids();
      if (contactsUuids.length > 0) {
        showComposeInitialized("c=" + contactsUuids);
      } else {
        showCompose();
      }
    });
    {% endif %}

    {% if org_perms.contacts.contact_create %}
    $("#add-contact").live('click', function() { showCreateContactModal(); });
    {% endif %}

    {% if org_perms.contacts.contact_delete %}
    $(".contacts-btn-delete").live('click', function() {
      modal = new ConfirmationModal($('.contact-deletion > .title').html(), $('.contact-deletion > .body').html());
      modal.addClass('alert');
      modal.setListeners({onPrimary: function(){
        runActionOnObjectRows("delete");
        modal.dismiss();
      }}, false);
      modal.setPrimaryButton('{% trans "Delete" %}');
      modal.show();
    });
    {% endif %}

    {% if org_perms.contacts.contact_unblock %}
      $(".page-content").on('click', ".object-btn-unblock", function() {
	    runActionOnObjectRows("unblock");
      });
      $(".page-content").on('click', ".object-btn-block", function() {
	    runActionOnObjectRows("block");
      });
    {% endif %}

    {% if org_perms.contacts.contact_unstop %}
      $(".page-content").on('click', ".object-btn-unstop", function() {
	    runActionOnObjectRows("unstop");
      });
    {% endif %}

    {% if org_perms.contacts.contactgroup_create %}
    $("#id_add_group").live('click', function() { showCreateGroupModal(); });
    {% endif %}

    $('.select-row').live('mouseover', function(){
      url = '/contact/read/' + $(this).data('uuid');

      $(this).find('td').not('.button-invitation').each(function(){
        $(this).attr('onClick', "document.location.href=url;");
      });
    });

    {% if org_perms.contacts.contactgroup_create %}

    $('.page-content').on('click', ".add-group", function() {
      var modal = new Modax('{% trans "Create Contact Group" %}', '{% url "contacts.contactgroup_create"%}');
      modal.setIcon('icon-users');
      modal.setListeners({
        onFormLoaded: function() { $("#active-modal form input#id_preselected_contacts").val(getCheckedIds().join()); }
      });
      modal.setRedirectOnSuccess(true);
      modal.show();
    });

    $('.page-content').on('click', ".add-dynamic-group", function() {
      var modal = new Modax('{% trans "Save Search as Group" %}', '{% url "contacts.contactgroup_create"%}');
      modal.setIcon('icon-users');
      modal.setListeners({
        onFormLoaded: function() { $("#active-modal form input#id_group_query").val('{{ search|escapejs }}'); }
      });
      modal.setRedirectOnSuccess(true);
      modal.show();
    });

    {% endif %}

    {% if org_perms.contacts.contactfield_managefields %}
    $('.page-content').on('click', ".manage-fields", function() {
      lastChecked = getCheckedIds();
      var modal = new Modax('{% trans "Manage Contact Fields" %}', '{% url "contacts.contactfield_managefields" %}');
      modal.setIcon('icon-vcard');
      modal.setListeners({
        onFormLoaded:function() {
          useFontCheckbox("input[type=checkbox]", false);
        },
        onSuccess: function() { refresh(function() { recheckIds(); }, true); }
      });
      modal.show();
    });
    {% endif %}
