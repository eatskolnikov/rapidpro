-extends "smartmin/read.html" 

-load smartmin sms contacts compress temba channels
-load i18n humanize

-block buttons

-block page-title
  {{contact|name_or_urn:user_org}}

-block title
  -if contact.is_blocked
    <div class="medium-help icon-user-block" style="float:left" title="{% trans "blocked" %}"></div>
  -elif contact.is_stopped
    <div class="medium-help icon-user-delete" style="float:left" title="{% trans "stopped" %}"></div>
  -else
    .medium-help.icon-user{style:"float:left"}
  %h2.header-margin
    {{contact|name_or_urn:user_org}}

  %h5.header-margin{style:"margin-bottom: 10px"}
    -if user_org.is_anon
      .contact-urn
        .glyph.icon-vcard
        {{contact.anon_identifier}}

    -for urn in contact_urns
      .contact-urn
        .{class:"glyph {{urn|urn_icon}}"}
        -if not user_org.is_anon
          -if urn.sendable
            %a.contact-urn-path{href:"javascript:showComposeInitialized(\"u={{ urn.id }}\", null, refreshRecents)"}><
              {{urn|format_urn:user_org}}
          -else
            %i.contact-urn-path
              -if urn.scheme == 'mailto'
                %a{href:"{{urn}}"}
                  {{urn|format_urn:user_org}}
              -elif urn.scheme == 'twitter'
                %a{href:'http://twitter.com/{{urn.path}}'}
                  {{urn|format_urn:user_org}}
              -elif urn.scheme == 'twitterid'
                %a{href:'http://twitter.com/{{urn.display}}'}
                  {{urn|format_urn:user_org}}
              -else
                {{urn|format_urn:user_org}}

        -else
          %span.contact-urn-path
            {{urn|format_urn:user_org}}

    -for urn in contact_unsendable_urns
      .contact-urn
        .{class:"glyph {{urn|urn_icon}}"}
        %i.contact-urn-path
          -if urn.scheme == 'mailto'
            %a{href:"{{urn}}"}
              {{urn|format_urn:user_org}}
          -elif urn.scheme == 'twitter'
            %a{href:'http://twitter.com/{{urn.path}}'}
              {{urn|format_urn:user_org}}
          -else
            {{urn|format_urn:user_org}}

  -block contact-groups
    %div.header-margin
      -for group in contact_groups
        %span.group-membership{id:"group_{{group.id}}_{{contact.id}}"}
          -if org_perms.contacts.contact_update and not group.is_dynamic
            %a.btn.btn-primary.btn-mini{href:"{% url 'contacts.contact_filter' group.uuid %}"}
              = group.name
              %a.btn.btn-primary.btn-mini{href:"#", onclick:'removeContactFromGroup({{group.pk}}, {{contact.pk}})'} x
          -else
            %a.btn.btn-primary.btn-mini{href:"{% url 'contacts.contact_filter' group.uuid %}"}
              = group.name

-block read-buttons

-block content

  // Needed for table wrapping on IE 9
  <!--[if IE]>
  <style>
    table.activity { table-layout: fixed; }
  </style>
  <![endif]-->

  -if contact_fields
    .contact-fields
      .featured
        -for field in contact_fields
          -if field.value and field.featured
            .contact-field{data-id:'{{field.id}}'}
              .contact-field-label
                {{field.label|title}}
              .contact-field-value
                {{field.value}}

      .normal.hide
        -for field in contact_fields
          -if field.value and not field.featured
            .contact-field{data-id:'{{field.id}}'}
              .contact-field-label
                {{field.label|title}}
              .contact-field-value
                {{field.value}}


  -if contact_fields|length > 4
    %a.pull-right.show-all.fields
        .icon-arrow-down

  -if org_perms.msgs.broadcast_send and not contact.is_blocked and not contact.is_stopped
    #box-message
      %h5
        -trans "Compose message"
      -if send_channel
        #send-custom-form
          {% csrf_token %}
          #box-text
            %input#id_custom_text{tabindex:1, type: 'text'}
            %button#send-custom-message.btn.btn-primary.ok{type: 'submit', tabindex:2}
              -trans "Send"
          #errors
          #omni-custom.hide
            #omni-custom-select2
              #omnibox-custom.placeholder.populate{style:"width:400px"}
            #loading-custom
      -else
        -blocktrans with name=brand.name
          To get started you need to add a channel to your account. A channel is a phone number or social network
          account which {{ name }} can use to send and receive messages on your behalf. You can choose to use an
          Android phone and your own cell phone plan, or we can connect you with a service provider in your country
          directly.

  -if upcoming_events
    %h5
      -trans "Upcoming"

    -if upcoming_events|length > 3
      :css
        tbody:nth-child(1) {
          display: none;
        }

    %table.activity.pending
      -for evt in upcoming_events
        -if forloop.counter0 == upcoming_events|length|add:-3
          %tbody.next_three

        %tr.item{class:"{% if evt.event_type == 'M' %}msg{%else%}non-msg{%endif%}"}
          %td.icon
            -if evt.event_type == 'M'
              %span.glyph.icon-bubble-right
            -elif evt.event_type == 'F'
              %span.glyph.icon-tree-2
            -else
              %span.glyph.icon-clock

          %td.details

            .activity-scheduled

              -if evt.event_type == 'M'
                //.summary
                //  Scheduled {{evt.event.campaign}} message
                .activity-body
                  {{evt.message}}



              -elif evt.event_type == 'F'
                -trans "Start"
                %a.href{ href: "{% url 'flows.flow_editor' evt.flow_uuid %}" }= evt.flow_name
          %td.created_on
            {{evt.scheduled}}

            .repeats
              -if evt.repeat_period == 'D'
                -trans 'repeats daily'
              -elif evt.repeat_period == 'W'
                -trans 'repeats weekly'

    -if upcoming_events|length > 3
      %a.pull-right.show-all.upcoming
        more

  %h5
    -trans "Message History"
  %table.activity.history{style:'padding:0;margin:0'}
    // poll for our most recent messages

    %tr.poll{ ic-src:"/contact/history/{{contact.uuid}}/?after={{recent_start}}",
              ic-trigger-on:"scrolled-into-view",
              ic-poll:"5s",
              ic-target:"table .recent",
              ic-poll-repeats:"30" }

    %tbody.recent

    // trigger the first batch of previous messages
    %tr{ ic-append-from:"/contact/history/{{contact.uuid}}/?before={{recent_start}}", 
         ic-trigger-on:"scrolled-into-view", 
         ic-target:"table .previous", 
         ic-indicator:"#indicator" }

    %tbody.previous

  #indicator{style:"display:none"}
    .loader


-block post-content
  -include "msgs/msg_send_modal.haml"

  -if org_perms.contacts.contact_delete
    .deletion.hide
      .title
        -trans "Delete Contact"

      .body
        %p
          -trans "Are you sure you want to delete this contact?"
        %p
          %b
            -if contact.name
              {{contact.name}}
            -else
              {{contact|format_contact:user_org}}
          %p
            -trans "Once they are deleted, they will be gone forever. There is no way to undo this operation."

      %a#delete-form.posterize{href:'{% url "contacts.contact_delete" contact.pk %}'}

-block extra-less
  -compress css

    {% lessblock %}
      :plain
        .show-all {
          margin-top:-10px;
          margin-right:18px;
          color: #d1d1d1;

          &.expanded {
            .icon-arrow-down {
              .rotate(2);
            }
          }
          .icon-arrow-down {
            margin-top:2px;
            margin-right: 3px;
          }

          &:hover {
            color: #c1c1c1;
            cursor: pointer;
          }
        }

        table.activity {
          tr.since {
            border-bottom: none;
            td {
              text-align:center;
              border-top: 1px solid @color-bg-grey + #555;
              padding-top:15px;

              .date {
                border:0px solid red;
              }

              .btn {
                margin-top:15px;
              }
            }
          }

          tr.in {
            background-color: rgba(86, 157, 155, 0.2);
            font-style: italic;
          }

          tr.end-call {
            background: #ddd;
            color: #000;
            td {
              text-align:center;
              padding: 5px;
            }
          }

          width: 100%;
          margin-bottom: 20px;
          border-collapse: collapse;

          &.pending {
            color: #ccc;

            tr.non-msg {
              background: inherit;
            }

            .icon {
              .glyph.icon-bubble-right, .glyph.icon-tree-2 {
                color: #ddd;
              }
              text-align:center;
            }

            a {
              color: #ddd;
            }
          }

          tr {
            border-top: 1px solid #f3f3f3;
            border-bottom: 1px solid #f3f3f3;
            width: 100%;

            &.msg {
              td.icon {
                .icon-bubble-right, .icon-bubble-check, .icon-bullhorn, .icon-call-outgoing {
                  color: @color-status-green;
                }

                .icon-bubble-user, .icon-call-incoming {
                  color: @color-primary;
                }

                .icon-bubble-notification {
                  color: @color-status-failed;
                }
              }
            }

            &.non-msg {
              background: #fafafa;

              .icon {
                color: rgba(0, 0, 0, 0.20);
              }
            }
          }

          td {
            vertical-align:middle;
            padding: 2px 20px;

            &.icon {
              border: 0px solid;
              width: 30px;
              padding: 2px 0px;
              padding-left: 10px;
              text-align: center;

              .glyph {
                margin-top:16px;
                font-size:14px;
                line-height:0;
                color: rgba(0,0,0,.20);
                padding: 5px;
              }
            }
          }

          .created_on {
            width: 180px;
            font-size:13px;
            line-height:13px;
            border: 0px solid;
            text-align:right;

            .repeats {
              font-size:90%;
            }
          }

          .details {
            border: 0px solid;
            padding: 14px;

            .summary {
              font-size:11px;
              font-weight:500;
              line-height:10px;
              color: @flat-grey;
            }
          }
        }

        .contact-urn {
          display: inline-block;
          margin-right: 10px;

          .glyph {
            margin-right: 3px;
          }
        }

        .contact-fields {
          background: #f9f9f9;

          font-size: 12px;
          color: @color-font-grey;
          border: 1px solid #f1f1f1;
          margin-bottom:15px;

          .show-more {
            padding: 10px;
            display:block;
          }

          .contact-field {
            display:inline-block;
            width: 260px;
            padding: 2px 10px;


            .contact-field-label {
              font-weight: normal;
              color: @color-font-black;
              font-size:12px;
              margin-right:2px;
              padding-top:5px;
              font-size:95%;
              display:block;
            }

            .contact-field-value {
              font-weight: bold;
              color: @color-font-grey;
              padding-top:-5px;
              cursor: pointer;
              display:inline-block;

              &:hover {
                text-decoration: underline;
              }
            }

          }
        }

        #box-message {
          background-color: #FFF;
          width: 100%;
          
          &.scroll {
            z-index: 10000;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            padding: 0 30px 10px 30px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            -webkit-box-sizing: border-box;

            #send-custom-form {
              margin: 0;
            } 

          }

        }

        #send-custom-form {
          margin: 0 0 40px 0;

          #box-text {
            position: relative;

            input[type='text'] {
              resize: none;
              display: block;
              width: 100%;
              height: 50px;
              padding: 0 100px 0 10px;
              margin-right: 15px;
              box-sizing: border-box;
              -moz-box-sizing: border-box;
              -webkit-box-sizing: border-box;
            }

            button {
              position: absolute;
              top: 0;
              right: 0;
              height: 100%;
            }

          }

          .error {
            background-color: transparent;
            color: red;
            border: none;
          }
        }

    {% endlessblock %}

-block extra-script
  {{ block.super }}

  :javascript

    var startTime = null;

    $(document).ready(function() {

      var boxMessage = $('#box-message');
      $(window).scroll(function() {
          if ($(this).scrollTop() > 365) {
            boxMessage.addClass('scroll');
          } else {
            boxMessage.removeClass('scroll');
          }
      });

      $('.show-all.upcoming').live('click', function() {
        $(this).hide();
        $('table.activity.pending tbody:nth-child(1)').show();
      });

      $('.show-all.fields').live('click', function() {
        if ($(this).hasClass('expanded')) {
          $(this).removeClass('expanded');
          $('.contact-fields').removeClass('expanded');
          $('.normal').slideUp();
        } else {
          $(this).addClass('expanded');
          $('.contact-fields').addClass('expanded');
          $('.normal').slideDown();
        }
      });

      $('.time').live('mouseover', function() {
        $(this).children('.long').show();
        $(this).children('.short').hide();
      }).live('mouseleave', function() {
        $(this).children('.short').show();
        $(this).children('.long').hide();
      });

      // configure the number of contact fields to show
      var featuredMax = 4;
      var featuredCount = $('.featured .contact-field').size()
      if (featuredCount < featuredMax) {
        $('.normal .contact-field').slice(0, featuredMax-featuredCount).detach().appendTo('.featured')
      }

      $("#send-custom-message").unbind('click').unbind('keypress').click(function(e) {
        sendCustomMessage(e, refreshRecents());
      });

      $( "#id_custom_text" ).keypress(function(e) {
        if(e.which == 13){
          sendCustomMessage(e, refreshRecents());
          e.preventDefault();
        }
      });

      var queryString = 'c={{object.uuid}}';
      $.get("{% url 'contacts.contact_omnibox' %}?" + queryString, function(data, textStatus){
        initializeCustomOmnibox(data.results);
      });

    });

    function goTo(elem) {
      $('html, body').animate({
        scrollTop: $(elem).offset().top
      }, 500);
    }

    function initializeCustomOmnibox(initial) {
      var options = {
          placeholder: gettext("Recipients, enter contacts or groups"),
          minimumInputLength: 0,
          multiple: true,
          ajax: {
              url: "/contact/omnibox/",
              dataType: 'json',
              data: function (term, page) {
                  return {
                      search: term,
                      page: page
                  };
              },
              results: function (data, page) {
                  return data;
              }
          },
          escapeMarkup: function(m) {
              return m;
          },
          containerCssClass: "omnibox-custom-select2",
          formatSelection: formatOmniboxSelection,
          formatResult: formatOmniboxOption,
          createSearchChoice: arbitraryNumberOption
      };

      var omnibox = $("#omnibox-custom").removeClass("loading").select2(options);

      // if we have some initial data set it
      if (initial) {
          $("#omnibox-custom").select2('data', initial);
          $("#omni-custom-select2").show();
          $("#loading-custom").hide();
          $("#send-custom-message").text(gettext("Send")).removeClass("disabled");
      }
      // otherwise, make sure our data is cleared
      else {
          $("#omnibox-custom").select2('data', null);
      }
    }

    function refreshRecents(){
      Intercooler.triggerRequest($('tr.poll'));
    }

    // plays an audio attachment on a message
    function playAudioAttachment(audioId) {
      var audio = $('audio#audio-' + audioId);
      var parent = audio.parent();
      var player = audio[0];

      if (!parent.hasClass('playing')) {
        audio.bind('ended', function(){
          parent.removeClass('playing');

        });

        parent.addClass('playing');
        player.currentTime = 0;
        player.play();

      } else {
        parent.removeClass('playing');
        player.pause();
      }
    }

    function sendCustomMessage(e, onComplete) {
      if ($("#send-custom-message").hasClass("disabled")) {
        e.preventDefault();
        return;
      }

      goTo('.page-content');
      $("#send-custom-message").text('{% trans "Sending.." %}').addClass("disabled");

      // its possible we might send to a different end point such as
      // when doing a normal compose
      var form = $('#send-custom-form');
      var url = form.attr("action");
      var post = "{% url 'msgs.broadcast_send' %}?_format=json";
      if (url) {
        post = url;
      }

      if (window.simulation) {
        post = post + "&simulation=true"
      }

      // our post data
      var data = {
        step_node: null,
        schedule: null,
        text: form.find("#id_custom_text").val(),
        csrfmiddlewaretoken: form.find("[name='csrfmiddlewaretoken']").val()
      };

      var omnibox = form.find("#omnibox-custom").val().trim();
      if (omnibox.length > 0) {
        data['omnibox'] = omnibox;
      }

      $.post(post, data, function(data, textStatus, b, c) {
        fetchPJAXContent(".", "#pjax", { forceReload:true });

        if (onComplete) {
          onComplete();
        }

        form.find("#id_custom_text").val('');
        $("#send-custom-message").text('{% trans "Send" %}').removeClass("disabled");

      }).fail(function(data, textStatus) {

        // uh oh, we couldnt post, check for errors to show the user
        response = $.parseJSON(data.responseText);

        // make sure we arent showing any previous errors
        $("#send-custom-form .error").remove();

        // show the non-field errors first
        for (msg in response.errors['__all__']) {
          $("#send-custom-form #errors").after("<div class=error>" + response.errors['__all__'][msg] + "</div>");
        }

        // look through our fielded errors and show them in the form
        for (var error in response.errors) {
          var msgs = response.errors[error];
          for (var msg in msgs) {

            var id = "#id_" + error;
            if (error == "text") {
              id = "#counter";
            }

            $(id).after("<div class=error id=" + error + "_error>" + msgs[msg] + "</div>");
          }
        }

        // re-enable our send button, so they can try again
        $("#send-custom-message").text('{% trans "Send" %}').removeClass("disabled");

      });
    }

  %script

    {% if org_perms.contacts.contact_update %}
    $(".update-contact").live('click', function(){
      var modal = new Modax('{% trans "Update Contact" %}','{% url "contacts.contact_update" object.pk %}');
      modal.setIcon('icon-user');
      modal.setRedirectOnSuccess(true);
      modal.show();
    });

    $(".update-contact-fields").live('click', function(){
      var modal = new Modax('{% trans "Custom Fields" %}','{% url "contacts.contact_update_fields" object.pk %}');
      modal.setIcon('icon-user');
      modal.setRedirectOnSuccess(true);
      modal.show();
    });

    $('.contact-field-value').live('click', function(evt) {
      var field_id = $(this).parent().data('id');
      var modal = new Modax('{% trans "Custom Fields" %}','{% url "contacts.contact_update_fields" object.pk %}?field=' + field_id);
      modal.setIcon('icon-user');
      modal.setRedirectOnSuccess(true);
      modal.show();
    });

    {% endif %}



    {% if org_perms.msgs.broadcast_send %}
    $('#send').submit(function(){
      var $textarea = $('#id_text');

      if(!$textarea.val()) {
        $textarea.css({'border':'1px solid #da4f49', 'color':'#da4f49'});
        $('.failed').remove();
        $('{% trans "<p>This field is required, please fill in the message to send out</p>" %}').insertAfter("#id_send").addClass('failed');
        return false;
      } else if($textarea.val().length > 160) {
        $('.failed').remove();
        $textarea.css({'border':'1px solid #da4f49', 'color':'#da4f49'});
        $('{%trans "<p>Ensure this value has at most 160 characters (it has " %}' + $textarea.val().length + ') </p> ').insertAfter("#id_send").addClass('failed');
        return false;
      } else {
        return true;
      }
    });
    {% endif %}

    {% if org_perms.contacts.contact_update %}
    function removeContactFromGroup(groupId, contactId){
      id = '#group_' + groupId + '_' + contactId;
      $.post('{% url 'contacts.contact_read' contact.uuid %}', {contact: contactId, group: groupId}, function(groupId, contactId) {
        $(id).remove();
      });
    }
    {% endif %}

    {% if org_perms.contacts.contact_delete %}
    $(".contact-delete-button").live('click', function() {
      $(".gear-menu").removeClass("open");
      modal = new ConfirmationModal($('.deletion > .title').html(), $('.deletion > .body').html());
      modal.addClass('alert');
      modal.setListeners({onPrimary: function(){
        $('#delete-form').click();
      }}, false);
      modal.setPrimaryButton('{% trans "Delete" %}');
      modal.show();
    });
    {% endif %}

    {% if org_perms.msgs.broadcast_send %}
    $(".contact-send-button").on('click', function() {
      {% if has_sendable_urn %}
      $(".gear-menu").removeClass("open");
      showComposeInitialized("c={{object.uuid}}", null, refreshRecents);
      {% else %}
      modal = new Modal('{% trans "Error" %}', '{% trans "This contact does not have any number which you can send to. Please edit the contact first or add a new phone." %}');
      modal.addClass('alert');
      modal.setListeners({onPrimary: function(){ modal.dismiss(); }}, false);
      modal.show();
      {% endif %}

      return false;
    });
    {% endif %}
